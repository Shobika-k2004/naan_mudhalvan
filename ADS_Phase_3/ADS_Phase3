{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "!apt-get install tree"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dYgAwFkmO_sZ",
        "outputId": "180a8f52-212e-4da2-a736-919af61e65e3"
      },
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Reading package lists... Done\n",
            "Building dependency tree... Done\n",
            "Reading state information... Done\n",
            "tree is already the newest version (2.0.2-1).\n",
            "0 upgraded, 0 newly installed, 0 to remove and 18 not upgraded.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#preprocesses of dataset"
      ],
      "metadata": {
        "id": "p6NiBzv1CXre"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "import libraries"
      ],
      "metadata": {
        "id": "8w4XYZTUb2gI"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 78,
      "metadata": {
        "id": "8Hq-yZtl_mhW"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from statsmodels.tsa.arima.model import ARIMA\n",
        "from sklearn.metrics import mean_squared_error"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "load the dataset"
      ],
      "metadata": {
        "id": "uecfW7ZzCT0n"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df=pd.read_csv(\"/content/Electricity (1) (1).csv\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hXj5ZnkqAO14",
        "outputId": "b7631c84-8f0b-4e52-9023-7fc0f2d185bf"
      },
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-79-686a806222b2>:1: DtypeWarning: Columns (9,10,11,14,15,16,17) have mixed types. Specify dtype option on import or set low_memory=False.\n",
            "  df=pd.read_csv(\"/content/Electricity (1) (1).csv\")\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 704
        },
        "id": "7qZu3o-XA1fP",
        "outputId": "a587f71e-3be8-49f5-ae65-8b17d3ce195c"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               DateTime         Holiday  HolidayFlag  DayOfWeek  WeekOfYear  \\\n",
              "0      01/11/2011 00:00            None            0          1          44   \n",
              "1      01/11/2011 00:30            None            0          1          44   \n",
              "2      01/11/2011 01:00            None            0          1          44   \n",
              "3      01/11/2011 01:30            None            0          1          44   \n",
              "4      01/11/2011 02:00            None            0          1          44   \n",
              "...                 ...             ...          ...        ...         ...   \n",
              "38009  31/12/2013 21:30  New Year's Eve            1          1           1   \n",
              "38010  31/12/2013 22:00  New Year's Eve            1          1           1   \n",
              "38011  31/12/2013 22:30  New Year's Eve            1          1           1   \n",
              "38012  31/12/2013 23:00  New Year's Eve            1          1           1   \n",
              "38013  31/12/2013 23:30  New Year's Eve            1          1           1   \n",
              "\n",
              "       Day  Month  Year  PeriodOfDay ForecastWindProduction SystemLoadEA  \\\n",
              "0        1     11  2011            0                 315.31      3388.77   \n",
              "1        1     11  2011            1                 321.80      3196.66   \n",
              "2        1     11  2011            2                 328.57      3060.71   \n",
              "3        1     11  2011            3                 335.60      2945.56   \n",
              "4        1     11  2011            4                 342.90      2849.34   \n",
              "...    ...    ...   ...          ...                    ...          ...   \n",
              "38009   31     12  2013           43                1179.14      3932.22   \n",
              "38010   31     12  2013           44                1152.01      3821.44   \n",
              "38011   31     12  2013           45                1123.67      3724.21   \n",
              "38012   31     12  2013           46                1094.24      3638.16   \n",
              "38013   31     12  2013           47                 1064.0      3624.25   \n",
              "\n",
              "       SMPEA ORKTemperature ORKWindspeed CO2Intensity ActualWindProduction  \\\n",
              "0      49.26           6.00         9.30       600.71               356.00   \n",
              "1      49.26           6.00        11.10       605.42               317.00   \n",
              "2      49.10           5.00        11.10       589.97               311.00   \n",
              "3      48.04           6.00         9.30       585.94               313.00   \n",
              "4      33.75           6.00        11.10       571.52               346.00   \n",
              "...      ...            ...          ...          ...                  ...   \n",
              "38009  34.51           6.00        22.20       285.31                812.0   \n",
              "38010  33.83           5.00        24.10       278.31                852.0   \n",
              "38011  31.75           4.00        20.40       280.91                962.0   \n",
              "38012  33.83           5.00        14.80       302.46                950.0   \n",
              "38013  33.83           5.00        16.70       308.01               1020.0   \n",
              "\n",
              "      SystemLoadEP2 SMPEP2  \n",
              "0           3159.60  54.32  \n",
              "1           2973.01  54.23  \n",
              "2           2834.00  54.23  \n",
              "3           2725.99  53.47  \n",
              "4           2655.64  39.87  \n",
              "...             ...    ...  \n",
              "38009       3692.95  42.45  \n",
              "38010        3571.0  33.83  \n",
              "38011       3460.29  31.75  \n",
              "38012       3563.99   50.6  \n",
              "38013       3517.08   34.9  \n",
              "\n",
              "[38014 rows x 18 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b0033c51-12e5-41cd-b4ff-ea16d7c61cae\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>DateTime</th>\n",
              "      <th>Holiday</th>\n",
              "      <th>HolidayFlag</th>\n",
              "      <th>DayOfWeek</th>\n",
              "      <th>WeekOfYear</th>\n",
              "      <th>Day</th>\n",
              "      <th>Month</th>\n",
              "      <th>Year</th>\n",
              "      <th>PeriodOfDay</th>\n",
              "      <th>ForecastWindProduction</th>\n",
              "      <th>SystemLoadEA</th>\n",
              "      <th>SMPEA</th>\n",
              "      <th>ORKTemperature</th>\n",
              "      <th>ORKWindspeed</th>\n",
              "      <th>CO2Intensity</th>\n",
              "      <th>ActualWindProduction</th>\n",
              "      <th>SystemLoadEP2</th>\n",
              "      <th>SMPEP2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>01/11/2011 00:00</td>\n",
              "      <td>None</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>44</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>2011</td>\n",
              "      <td>0</td>\n",
              "      <td>315.31</td>\n",
              "      <td>3388.77</td>\n",
              "      <td>49.26</td>\n",
              "      <td>6.00</td>\n",
              "      <td>9.30</td>\n",
              "      <td>600.71</td>\n",
              "      <td>356.00</td>\n",
              "      <td>3159.60</td>\n",
              "      <td>54.32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>01/11/2011 00:30</td>\n",
              "      <td>None</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>44</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>2011</td>\n",
              "      <td>1</td>\n",
              "      <td>321.80</td>\n",
              "      <td>3196.66</td>\n",
              "      <td>49.26</td>\n",
              "      <td>6.00</td>\n",
              "      <td>11.10</td>\n",
              "      <td>605.42</td>\n",
              "      <td>317.00</td>\n",
              "      <td>2973.01</td>\n",
              "      <td>54.23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>01/11/2011 01:00</td>\n",
              "      <td>None</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>44</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>2011</td>\n",
              "      <td>2</td>\n",
              "      <td>328.57</td>\n",
              "      <td>3060.71</td>\n",
              "      <td>49.10</td>\n",
              "      <td>5.00</td>\n",
              "      <td>11.10</td>\n",
              "      <td>589.97</td>\n",
              "      <td>311.00</td>\n",
              "      <td>2834.00</td>\n",
              "      <td>54.23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>01/11/2011 01:30</td>\n",
              "      <td>None</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>44</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>2011</td>\n",
              "      <td>3</td>\n",
              "      <td>335.60</td>\n",
              "      <td>2945.56</td>\n",
              "      <td>48.04</td>\n",
              "      <td>6.00</td>\n",
              "      <td>9.30</td>\n",
              "      <td>585.94</td>\n",
              "      <td>313.00</td>\n",
              "      <td>2725.99</td>\n",
              "      <td>53.47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>01/11/2011 02:00</td>\n",
              "      <td>None</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>44</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>2011</td>\n",
              "      <td>4</td>\n",
              "      <td>342.90</td>\n",
              "      <td>2849.34</td>\n",
              "      <td>33.75</td>\n",
              "      <td>6.00</td>\n",
              "      <td>11.10</td>\n",
              "      <td>571.52</td>\n",
              "      <td>346.00</td>\n",
              "      <td>2655.64</td>\n",
              "      <td>39.87</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38009</th>\n",
              "      <td>31/12/2013 21:30</td>\n",
              "      <td>New Year's Eve</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>31</td>\n",
              "      <td>12</td>\n",
              "      <td>2013</td>\n",
              "      <td>43</td>\n",
              "      <td>1179.14</td>\n",
              "      <td>3932.22</td>\n",
              "      <td>34.51</td>\n",
              "      <td>6.00</td>\n",
              "      <td>22.20</td>\n",
              "      <td>285.31</td>\n",
              "      <td>812.0</td>\n",
              "      <td>3692.95</td>\n",
              "      <td>42.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38010</th>\n",
              "      <td>31/12/2013 22:00</td>\n",
              "      <td>New Year's Eve</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>31</td>\n",
              "      <td>12</td>\n",
              "      <td>2013</td>\n",
              "      <td>44</td>\n",
              "      <td>1152.01</td>\n",
              "      <td>3821.44</td>\n",
              "      <td>33.83</td>\n",
              "      <td>5.00</td>\n",
              "      <td>24.10</td>\n",
              "      <td>278.31</td>\n",
              "      <td>852.0</td>\n",
              "      <td>3571.0</td>\n",
              "      <td>33.83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38011</th>\n",
              "      <td>31/12/2013 22:30</td>\n",
              "      <td>New Year's Eve</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>31</td>\n",
              "      <td>12</td>\n",
              "      <td>2013</td>\n",
              "      <td>45</td>\n",
              "      <td>1123.67</td>\n",
              "      <td>3724.21</td>\n",
              "      <td>31.75</td>\n",
              "      <td>4.00</td>\n",
              "      <td>20.40</td>\n",
              "      <td>280.91</td>\n",
              "      <td>962.0</td>\n",
              "      <td>3460.29</td>\n",
              "      <td>31.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38012</th>\n",
              "      <td>31/12/2013 23:00</td>\n",
              "      <td>New Year's Eve</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>31</td>\n",
              "      <td>12</td>\n",
              "      <td>2013</td>\n",
              "      <td>46</td>\n",
              "      <td>1094.24</td>\n",
              "      <td>3638.16</td>\n",
              "      <td>33.83</td>\n",
              "      <td>5.00</td>\n",
              "      <td>14.80</td>\n",
              "      <td>302.46</td>\n",
              "      <td>950.0</td>\n",
              "      <td>3563.99</td>\n",
              "      <td>50.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38013</th>\n",
              "      <td>31/12/2013 23:30</td>\n",
              "      <td>New Year's Eve</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>31</td>\n",
              "      <td>12</td>\n",
              "      <td>2013</td>\n",
              "      <td>47</td>\n",
              "      <td>1064.0</td>\n",
              "      <td>3624.25</td>\n",
              "      <td>33.83</td>\n",
              "      <td>5.00</td>\n",
              "      <td>16.70</td>\n",
              "      <td>308.01</td>\n",
              "      <td>1020.0</td>\n",
              "      <td>3517.08</td>\n",
              "      <td>34.9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>38014 rows × 18 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b0033c51-12e5-41cd-b4ff-ea16d7c61cae')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b0033c51-12e5-41cd-b4ff-ea16d7c61cae button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b0033c51-12e5-41cd-b4ff-ea16d7c61cae');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5e86ecb2-9f46-4482-97e9-6ed2ed75450b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5e86ecb2-9f46-4482-97e9-6ed2ed75450b')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5e86ecb2-9f46-4482-97e9-6ed2ed75450b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "read the head"
      ],
      "metadata": {
        "id": "yNUbowz3Cgh2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.head"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GSIAPRXCA2iF",
        "outputId": "23f42dc3-395e-4aba-d402-d02a6132fbf7"
      },
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method NDFrame.head of                DateTime         Holiday  HolidayFlag  DayOfWeek  WeekOfYear  \\\n",
              "0      01/11/2011 00:00            None            0          1          44   \n",
              "1      01/11/2011 00:30            None            0          1          44   \n",
              "2      01/11/2011 01:00            None            0          1          44   \n",
              "3      01/11/2011 01:30            None            0          1          44   \n",
              "4      01/11/2011 02:00            None            0          1          44   \n",
              "...                 ...             ...          ...        ...         ...   \n",
              "38009  31/12/2013 21:30  New Year's Eve            1          1           1   \n",
              "38010  31/12/2013 22:00  New Year's Eve            1          1           1   \n",
              "38011  31/12/2013 22:30  New Year's Eve            1          1           1   \n",
              "38012  31/12/2013 23:00  New Year's Eve            1          1           1   \n",
              "38013  31/12/2013 23:30  New Year's Eve            1          1           1   \n",
              "\n",
              "       Day  Month  Year  PeriodOfDay ForecastWindProduction SystemLoadEA  \\\n",
              "0        1     11  2011            0                 315.31      3388.77   \n",
              "1        1     11  2011            1                 321.80      3196.66   \n",
              "2        1     11  2011            2                 328.57      3060.71   \n",
              "3        1     11  2011            3                 335.60      2945.56   \n",
              "4        1     11  2011            4                 342.90      2849.34   \n",
              "...    ...    ...   ...          ...                    ...          ...   \n",
              "38009   31     12  2013           43                1179.14      3932.22   \n",
              "38010   31     12  2013           44                1152.01      3821.44   \n",
              "38011   31     12  2013           45                1123.67      3724.21   \n",
              "38012   31     12  2013           46                1094.24      3638.16   \n",
              "38013   31     12  2013           47                 1064.0      3624.25   \n",
              "\n",
              "       SMPEA ORKTemperature ORKWindspeed CO2Intensity ActualWindProduction  \\\n",
              "0      49.26           6.00         9.30       600.71               356.00   \n",
              "1      49.26           6.00        11.10       605.42               317.00   \n",
              "2      49.10           5.00        11.10       589.97               311.00   \n",
              "3      48.04           6.00         9.30       585.94               313.00   \n",
              "4      33.75           6.00        11.10       571.52               346.00   \n",
              "...      ...            ...          ...          ...                  ...   \n",
              "38009  34.51           6.00        22.20       285.31                812.0   \n",
              "38010  33.83           5.00        24.10       278.31                852.0   \n",
              "38011  31.75           4.00        20.40       280.91                962.0   \n",
              "38012  33.83           5.00        14.80       302.46                950.0   \n",
              "38013  33.83           5.00        16.70       308.01               1020.0   \n",
              "\n",
              "      SystemLoadEP2 SMPEP2  \n",
              "0           3159.60  54.32  \n",
              "1           2973.01  54.23  \n",
              "2           2834.00  54.23  \n",
              "3           2725.99  53.47  \n",
              "4           2655.64  39.87  \n",
              "...             ...    ...  \n",
              "38009       3692.95  42.45  \n",
              "38010        3571.0  33.83  \n",
              "38011       3460.29  31.75  \n",
              "38012       3563.99   50.6  \n",
              "38013       3517.08   34.9  \n",
              "\n",
              "[38014 rows x 18 columns]>"
            ]
          },
          "metadata": {},
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "read the last 10 columns"
      ],
      "metadata": {
        "id": "nKiZHyKVCjQ-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.tail"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sRG5QgtBA74d",
        "outputId": "264904ae-57f0-4647-b0ea-4f345827cc36"
      },
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method NDFrame.tail of                DateTime         Holiday  HolidayFlag  DayOfWeek  WeekOfYear  \\\n",
              "0      01/11/2011 00:00            None            0          1          44   \n",
              "1      01/11/2011 00:30            None            0          1          44   \n",
              "2      01/11/2011 01:00            None            0          1          44   \n",
              "3      01/11/2011 01:30            None            0          1          44   \n",
              "4      01/11/2011 02:00            None            0          1          44   \n",
              "...                 ...             ...          ...        ...         ...   \n",
              "38009  31/12/2013 21:30  New Year's Eve            1          1           1   \n",
              "38010  31/12/2013 22:00  New Year's Eve            1          1           1   \n",
              "38011  31/12/2013 22:30  New Year's Eve            1          1           1   \n",
              "38012  31/12/2013 23:00  New Year's Eve            1          1           1   \n",
              "38013  31/12/2013 23:30  New Year's Eve            1          1           1   \n",
              "\n",
              "       Day  Month  Year  PeriodOfDay ForecastWindProduction SystemLoadEA  \\\n",
              "0        1     11  2011            0                 315.31      3388.77   \n",
              "1        1     11  2011            1                 321.80      3196.66   \n",
              "2        1     11  2011            2                 328.57      3060.71   \n",
              "3        1     11  2011            3                 335.60      2945.56   \n",
              "4        1     11  2011            4                 342.90      2849.34   \n",
              "...    ...    ...   ...          ...                    ...          ...   \n",
              "38009   31     12  2013           43                1179.14      3932.22   \n",
              "38010   31     12  2013           44                1152.01      3821.44   \n",
              "38011   31     12  2013           45                1123.67      3724.21   \n",
              "38012   31     12  2013           46                1094.24      3638.16   \n",
              "38013   31     12  2013           47                 1064.0      3624.25   \n",
              "\n",
              "       SMPEA ORKTemperature ORKWindspeed CO2Intensity ActualWindProduction  \\\n",
              "0      49.26           6.00         9.30       600.71               356.00   \n",
              "1      49.26           6.00        11.10       605.42               317.00   \n",
              "2      49.10           5.00        11.10       589.97               311.00   \n",
              "3      48.04           6.00         9.30       585.94               313.00   \n",
              "4      33.75           6.00        11.10       571.52               346.00   \n",
              "...      ...            ...          ...          ...                  ...   \n",
              "38009  34.51           6.00        22.20       285.31                812.0   \n",
              "38010  33.83           5.00        24.10       278.31                852.0   \n",
              "38011  31.75           4.00        20.40       280.91                962.0   \n",
              "38012  33.83           5.00        14.80       302.46                950.0   \n",
              "38013  33.83           5.00        16.70       308.01               1020.0   \n",
              "\n",
              "      SystemLoadEP2 SMPEP2  \n",
              "0           3159.60  54.32  \n",
              "1           2973.01  54.23  \n",
              "2           2834.00  54.23  \n",
              "3           2725.99  53.47  \n",
              "4           2655.64  39.87  \n",
              "...             ...    ...  \n",
              "38009       3692.95  42.45  \n",
              "38010        3571.0  33.83  \n",
              "38011       3460.29  31.75  \n",
              "38012       3563.99   50.6  \n",
              "38013       3517.08   34.9  \n",
              "\n",
              "[38014 rows x 18 columns]>"
            ]
          },
          "metadata": {},
          "execution_count": 82
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MkmZkBgsBCYe",
        "outputId": "ad5dd39d-f380-44f5-95ce-db1f7658db80"
      },
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(38014, 18)"
            ]
          },
          "metadata": {},
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hS7XjCwQBF5e",
        "outputId": "0644f720-6cbd-49f3-c7ef-42c034b4f929"
      },
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method NDFrame.describe of                DateTime         Holiday  HolidayFlag  DayOfWeek  WeekOfYear  \\\n",
              "0      01/11/2011 00:00            None            0          1          44   \n",
              "1      01/11/2011 00:30            None            0          1          44   \n",
              "2      01/11/2011 01:00            None            0          1          44   \n",
              "3      01/11/2011 01:30            None            0          1          44   \n",
              "4      01/11/2011 02:00            None            0          1          44   \n",
              "...                 ...             ...          ...        ...         ...   \n",
              "38009  31/12/2013 21:30  New Year's Eve            1          1           1   \n",
              "38010  31/12/2013 22:00  New Year's Eve            1          1           1   \n",
              "38011  31/12/2013 22:30  New Year's Eve            1          1           1   \n",
              "38012  31/12/2013 23:00  New Year's Eve            1          1           1   \n",
              "38013  31/12/2013 23:30  New Year's Eve            1          1           1   \n",
              "\n",
              "       Day  Month  Year  PeriodOfDay ForecastWindProduction SystemLoadEA  \\\n",
              "0        1     11  2011            0                 315.31      3388.77   \n",
              "1        1     11  2011            1                 321.80      3196.66   \n",
              "2        1     11  2011            2                 328.57      3060.71   \n",
              "3        1     11  2011            3                 335.60      2945.56   \n",
              "4        1     11  2011            4                 342.90      2849.34   \n",
              "...    ...    ...   ...          ...                    ...          ...   \n",
              "38009   31     12  2013           43                1179.14      3932.22   \n",
              "38010   31     12  2013           44                1152.01      3821.44   \n",
              "38011   31     12  2013           45                1123.67      3724.21   \n",
              "38012   31     12  2013           46                1094.24      3638.16   \n",
              "38013   31     12  2013           47                 1064.0      3624.25   \n",
              "\n",
              "       SMPEA ORKTemperature ORKWindspeed CO2Intensity ActualWindProduction  \\\n",
              "0      49.26           6.00         9.30       600.71               356.00   \n",
              "1      49.26           6.00        11.10       605.42               317.00   \n",
              "2      49.10           5.00        11.10       589.97               311.00   \n",
              "3      48.04           6.00         9.30       585.94               313.00   \n",
              "4      33.75           6.00        11.10       571.52               346.00   \n",
              "...      ...            ...          ...          ...                  ...   \n",
              "38009  34.51           6.00        22.20       285.31                812.0   \n",
              "38010  33.83           5.00        24.10       278.31                852.0   \n",
              "38011  31.75           4.00        20.40       280.91                962.0   \n",
              "38012  33.83           5.00        14.80       302.46                950.0   \n",
              "38013  33.83           5.00        16.70       308.01               1020.0   \n",
              "\n",
              "      SystemLoadEP2 SMPEP2  \n",
              "0           3159.60  54.32  \n",
              "1           2973.01  54.23  \n",
              "2           2834.00  54.23  \n",
              "3           2725.99  53.47  \n",
              "4           2655.64  39.87  \n",
              "...             ...    ...  \n",
              "38009       3692.95  42.45  \n",
              "38010        3571.0  33.83  \n",
              "38011       3460.29  31.75  \n",
              "38012       3563.99   50.6  \n",
              "38013       3517.08   34.9  \n",
              "\n",
              "[38014 rows x 18 columns]>"
            ]
          },
          "metadata": {},
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bY8J7h31BHxO",
        "outputId": "dd5a8432-5cdd-4cb0-cecb-c2f16bbf72d5"
      },
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['DateTime', 'Holiday', 'HolidayFlag', 'DayOfWeek', 'WeekOfYear', 'Day',\n",
              "       'Month', 'Year', 'PeriodOfDay', 'ForecastWindProduction',\n",
              "       'SystemLoadEA', 'SMPEA', 'ORKTemperature', 'ORKWindspeed',\n",
              "       'CO2Intensity', 'ActualWindProduction', 'SystemLoadEP2', 'SMPEP2'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#check the null values"
      ],
      "metadata": {
        "id": "rmChvoAqCqBO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nMQ6yxv_BL3u",
        "outputId": "2f48113b-3d1e-43fa-f8cc-8e80383c6f1c"
      },
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method DataFrame.isnull of                DateTime         Holiday  HolidayFlag  DayOfWeek  WeekOfYear  \\\n",
              "0      01/11/2011 00:00            None            0          1          44   \n",
              "1      01/11/2011 00:30            None            0          1          44   \n",
              "2      01/11/2011 01:00            None            0          1          44   \n",
              "3      01/11/2011 01:30            None            0          1          44   \n",
              "4      01/11/2011 02:00            None            0          1          44   \n",
              "...                 ...             ...          ...        ...         ...   \n",
              "38009  31/12/2013 21:30  New Year's Eve            1          1           1   \n",
              "38010  31/12/2013 22:00  New Year's Eve            1          1           1   \n",
              "38011  31/12/2013 22:30  New Year's Eve            1          1           1   \n",
              "38012  31/12/2013 23:00  New Year's Eve            1          1           1   \n",
              "38013  31/12/2013 23:30  New Year's Eve            1          1           1   \n",
              "\n",
              "       Day  Month  Year  PeriodOfDay ForecastWindProduction SystemLoadEA  \\\n",
              "0        1     11  2011            0                 315.31      3388.77   \n",
              "1        1     11  2011            1                 321.80      3196.66   \n",
              "2        1     11  2011            2                 328.57      3060.71   \n",
              "3        1     11  2011            3                 335.60      2945.56   \n",
              "4        1     11  2011            4                 342.90      2849.34   \n",
              "...    ...    ...   ...          ...                    ...          ...   \n",
              "38009   31     12  2013           43                1179.14      3932.22   \n",
              "38010   31     12  2013           44                1152.01      3821.44   \n",
              "38011   31     12  2013           45                1123.67      3724.21   \n",
              "38012   31     12  2013           46                1094.24      3638.16   \n",
              "38013   31     12  2013           47                 1064.0      3624.25   \n",
              "\n",
              "       SMPEA ORKTemperature ORKWindspeed CO2Intensity ActualWindProduction  \\\n",
              "0      49.26           6.00         9.30       600.71               356.00   \n",
              "1      49.26           6.00        11.10       605.42               317.00   \n",
              "2      49.10           5.00        11.10       589.97               311.00   \n",
              "3      48.04           6.00         9.30       585.94               313.00   \n",
              "4      33.75           6.00        11.10       571.52               346.00   \n",
              "...      ...            ...          ...          ...                  ...   \n",
              "38009  34.51           6.00        22.20       285.31                812.0   \n",
              "38010  33.83           5.00        24.10       278.31                852.0   \n",
              "38011  31.75           4.00        20.40       280.91                962.0   \n",
              "38012  33.83           5.00        14.80       302.46                950.0   \n",
              "38013  33.83           5.00        16.70       308.01               1020.0   \n",
              "\n",
              "      SystemLoadEP2 SMPEP2  \n",
              "0           3159.60  54.32  \n",
              "1           2973.01  54.23  \n",
              "2           2834.00  54.23  \n",
              "3           2725.99  53.47  \n",
              "4           2655.64  39.87  \n",
              "...             ...    ...  \n",
              "38009       3692.95  42.45  \n",
              "38010        3571.0  33.83  \n",
              "38011       3460.29  31.75  \n",
              "38012       3563.99   50.6  \n",
              "38013       3517.08   34.9  \n",
              "\n",
              "[38014 rows x 18 columns]>"
            ]
          },
          "metadata": {},
          "execution_count": 86
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VFeNbRW_CvdO",
        "outputId": "bb4f9665-f9b8-452e-9bb6-42a56c0e0cb7"
      },
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method NDFrame._add_numeric_operations.<locals>.sum of        DateTime  Holiday  HolidayFlag  DayOfWeek  WeekOfYear    Day  Month  \\\n",
              "0         False    False        False      False       False  False  False   \n",
              "1         False    False        False      False       False  False  False   \n",
              "2         False    False        False      False       False  False  False   \n",
              "3         False    False        False      False       False  False  False   \n",
              "4         False    False        False      False       False  False  False   \n",
              "...         ...      ...          ...        ...         ...    ...    ...   \n",
              "38009     False    False        False      False       False  False  False   \n",
              "38010     False    False        False      False       False  False  False   \n",
              "38011     False    False        False      False       False  False  False   \n",
              "38012     False    False        False      False       False  False  False   \n",
              "38013     False    False        False      False       False  False  False   \n",
              "\n",
              "        Year  PeriodOfDay  ForecastWindProduction  SystemLoadEA  SMPEA  \\\n",
              "0      False        False                   False         False  False   \n",
              "1      False        False                   False         False  False   \n",
              "2      False        False                   False         False  False   \n",
              "3      False        False                   False         False  False   \n",
              "4      False        False                   False         False  False   \n",
              "...      ...          ...                     ...           ...    ...   \n",
              "38009  False        False                   False         False  False   \n",
              "38010  False        False                   False         False  False   \n",
              "38011  False        False                   False         False  False   \n",
              "38012  False        False                   False         False  False   \n",
              "38013  False        False                   False         False  False   \n",
              "\n",
              "       ORKTemperature  ORKWindspeed  CO2Intensity  ActualWindProduction  \\\n",
              "0               False         False         False                 False   \n",
              "1               False         False         False                 False   \n",
              "2               False         False         False                 False   \n",
              "3               False         False         False                 False   \n",
              "4               False         False         False                 False   \n",
              "...               ...           ...           ...                   ...   \n",
              "38009           False         False         False                 False   \n",
              "38010           False         False         False                 False   \n",
              "38011           False         False         False                 False   \n",
              "38012           False         False         False                 False   \n",
              "38013           False         False         False                 False   \n",
              "\n",
              "       SystemLoadEP2  SMPEP2  \n",
              "0              False   False  \n",
              "1              False   False  \n",
              "2              False   False  \n",
              "3              False   False  \n",
              "4              False   False  \n",
              "...              ...     ...  \n",
              "38009          False   False  \n",
              "38010          False   False  \n",
              "38011          False   False  \n",
              "38012          False   False  \n",
              "38013          False   False  \n",
              "\n",
              "[38014 rows x 18 columns]>"
            ]
          },
          "metadata": {},
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.dropna()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 704
        },
        "id": "C55Cp0ddeFQN",
        "outputId": "97c67863-0264-47ac-f692-105372764a48"
      },
      "execution_count": 112,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               DateTime         Holiday  HolidayFlag  DayOfWeek  WeekOfYear  \\\n",
              "0      01/11/2011 00:00            None            0          1          44   \n",
              "1      01/11/2011 00:30            None            0          1          44   \n",
              "2      01/11/2011 01:00            None            0          1          44   \n",
              "3      01/11/2011 01:30            None            0          1          44   \n",
              "4      01/11/2011 02:00            None            0          1          44   \n",
              "...                 ...             ...          ...        ...         ...   \n",
              "38009  31/12/2013 21:30  New Year's Eve            1          1           1   \n",
              "38010  31/12/2013 22:00  New Year's Eve            1          1           1   \n",
              "38011  31/12/2013 22:30  New Year's Eve            1          1           1   \n",
              "38012  31/12/2013 23:00  New Year's Eve            1          1           1   \n",
              "38013  31/12/2013 23:30  New Year's Eve            1          1           1   \n",
              "\n",
              "       Day  Month  Year  PeriodOfDay  ForecastWindProduction  SystemLoadEA  \\\n",
              "0        1     11  2011            0                  315.31       3388.77   \n",
              "1        1     11  2011            1                  321.80       3196.66   \n",
              "2        1     11  2011            2                  328.57       3060.71   \n",
              "3        1     11  2011            3                  335.60       2945.56   \n",
              "4        1     11  2011            4                  342.90       2849.34   \n",
              "...    ...    ...   ...          ...                     ...           ...   \n",
              "38009   31     12  2013           43                 1179.14       3932.22   \n",
              "38010   31     12  2013           44                 1152.01       3821.44   \n",
              "38011   31     12  2013           45                 1123.67       3724.21   \n",
              "38012   31     12  2013           46                 1094.24       3638.16   \n",
              "38013   31     12  2013           47                 1064.00       3624.25   \n",
              "\n",
              "       SMPEA  ORKTemperature  ORKWindspeed  CO2Intensity  \\\n",
              "0      49.26             6.0           9.3        600.71   \n",
              "1      49.26             6.0          11.1        605.42   \n",
              "2      49.10             5.0          11.1        589.97   \n",
              "3      48.04             6.0           9.3        585.94   \n",
              "4      33.75             6.0          11.1        571.52   \n",
              "...      ...             ...           ...           ...   \n",
              "38009  34.51             6.0          22.2        285.31   \n",
              "38010  33.83             5.0          24.1        278.31   \n",
              "38011  31.75             4.0          20.4        280.91   \n",
              "38012  33.83             5.0          14.8        302.46   \n",
              "38013  33.83             5.0          16.7        308.01   \n",
              "\n",
              "       ActualWindProduction  SystemLoadEP2  SMPEP2  \n",
              "0                     356.0        3159.60   54.32  \n",
              "1                     317.0        2973.01   54.23  \n",
              "2                     311.0        2834.00   54.23  \n",
              "3                     313.0        2725.99   53.47  \n",
              "4                     346.0        2655.64   39.87  \n",
              "...                     ...            ...     ...  \n",
              "38009                 812.0        3692.95   42.45  \n",
              "38010                 852.0        3571.00   33.83  \n",
              "38011                 962.0        3460.29   31.75  \n",
              "38012                 950.0        3563.99   50.60  \n",
              "38013                1020.0        3517.08   34.90  \n",
              "\n",
              "[38014 rows x 18 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6c99007f-e792-4fe2-98af-0879fe7f6bcb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>DateTime</th>\n",
              "      <th>Holiday</th>\n",
              "      <th>HolidayFlag</th>\n",
              "      <th>DayOfWeek</th>\n",
              "      <th>WeekOfYear</th>\n",
              "      <th>Day</th>\n",
              "      <th>Month</th>\n",
              "      <th>Year</th>\n",
              "      <th>PeriodOfDay</th>\n",
              "      <th>ForecastWindProduction</th>\n",
              "      <th>SystemLoadEA</th>\n",
              "      <th>SMPEA</th>\n",
              "      <th>ORKTemperature</th>\n",
              "      <th>ORKWindspeed</th>\n",
              "      <th>CO2Intensity</th>\n",
              "      <th>ActualWindProduction</th>\n",
              "      <th>SystemLoadEP2</th>\n",
              "      <th>SMPEP2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>01/11/2011 00:00</td>\n",
              "      <td>None</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>44</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>2011</td>\n",
              "      <td>0</td>\n",
              "      <td>315.31</td>\n",
              "      <td>3388.77</td>\n",
              "      <td>49.26</td>\n",
              "      <td>6.0</td>\n",
              "      <td>9.3</td>\n",
              "      <td>600.71</td>\n",
              "      <td>356.0</td>\n",
              "      <td>3159.60</td>\n",
              "      <td>54.32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>01/11/2011 00:30</td>\n",
              "      <td>None</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>44</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>2011</td>\n",
              "      <td>1</td>\n",
              "      <td>321.80</td>\n",
              "      <td>3196.66</td>\n",
              "      <td>49.26</td>\n",
              "      <td>6.0</td>\n",
              "      <td>11.1</td>\n",
              "      <td>605.42</td>\n",
              "      <td>317.0</td>\n",
              "      <td>2973.01</td>\n",
              "      <td>54.23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>01/11/2011 01:00</td>\n",
              "      <td>None</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>44</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>2011</td>\n",
              "      <td>2</td>\n",
              "      <td>328.57</td>\n",
              "      <td>3060.71</td>\n",
              "      <td>49.10</td>\n",
              "      <td>5.0</td>\n",
              "      <td>11.1</td>\n",
              "      <td>589.97</td>\n",
              "      <td>311.0</td>\n",
              "      <td>2834.00</td>\n",
              "      <td>54.23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>01/11/2011 01:30</td>\n",
              "      <td>None</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>44</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>2011</td>\n",
              "      <td>3</td>\n",
              "      <td>335.60</td>\n",
              "      <td>2945.56</td>\n",
              "      <td>48.04</td>\n",
              "      <td>6.0</td>\n",
              "      <td>9.3</td>\n",
              "      <td>585.94</td>\n",
              "      <td>313.0</td>\n",
              "      <td>2725.99</td>\n",
              "      <td>53.47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>01/11/2011 02:00</td>\n",
              "      <td>None</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>44</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>2011</td>\n",
              "      <td>4</td>\n",
              "      <td>342.90</td>\n",
              "      <td>2849.34</td>\n",
              "      <td>33.75</td>\n",
              "      <td>6.0</td>\n",
              "      <td>11.1</td>\n",
              "      <td>571.52</td>\n",
              "      <td>346.0</td>\n",
              "      <td>2655.64</td>\n",
              "      <td>39.87</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38009</th>\n",
              "      <td>31/12/2013 21:30</td>\n",
              "      <td>New Year's Eve</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>31</td>\n",
              "      <td>12</td>\n",
              "      <td>2013</td>\n",
              "      <td>43</td>\n",
              "      <td>1179.14</td>\n",
              "      <td>3932.22</td>\n",
              "      <td>34.51</td>\n",
              "      <td>6.0</td>\n",
              "      <td>22.2</td>\n",
              "      <td>285.31</td>\n",
              "      <td>812.0</td>\n",
              "      <td>3692.95</td>\n",
              "      <td>42.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38010</th>\n",
              "      <td>31/12/2013 22:00</td>\n",
              "      <td>New Year's Eve</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>31</td>\n",
              "      <td>12</td>\n",
              "      <td>2013</td>\n",
              "      <td>44</td>\n",
              "      <td>1152.01</td>\n",
              "      <td>3821.44</td>\n",
              "      <td>33.83</td>\n",
              "      <td>5.0</td>\n",
              "      <td>24.1</td>\n",
              "      <td>278.31</td>\n",
              "      <td>852.0</td>\n",
              "      <td>3571.00</td>\n",
              "      <td>33.83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38011</th>\n",
              "      <td>31/12/2013 22:30</td>\n",
              "      <td>New Year's Eve</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>31</td>\n",
              "      <td>12</td>\n",
              "      <td>2013</td>\n",
              "      <td>45</td>\n",
              "      <td>1123.67</td>\n",
              "      <td>3724.21</td>\n",
              "      <td>31.75</td>\n",
              "      <td>4.0</td>\n",
              "      <td>20.4</td>\n",
              "      <td>280.91</td>\n",
              "      <td>962.0</td>\n",
              "      <td>3460.29</td>\n",
              "      <td>31.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38012</th>\n",
              "      <td>31/12/2013 23:00</td>\n",
              "      <td>New Year's Eve</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>31</td>\n",
              "      <td>12</td>\n",
              "      <td>2013</td>\n",
              "      <td>46</td>\n",
              "      <td>1094.24</td>\n",
              "      <td>3638.16</td>\n",
              "      <td>33.83</td>\n",
              "      <td>5.0</td>\n",
              "      <td>14.8</td>\n",
              "      <td>302.46</td>\n",
              "      <td>950.0</td>\n",
              "      <td>3563.99</td>\n",
              "      <td>50.60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38013</th>\n",
              "      <td>31/12/2013 23:30</td>\n",
              "      <td>New Year's Eve</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>31</td>\n",
              "      <td>12</td>\n",
              "      <td>2013</td>\n",
              "      <td>47</td>\n",
              "      <td>1064.00</td>\n",
              "      <td>3624.25</td>\n",
              "      <td>33.83</td>\n",
              "      <td>5.0</td>\n",
              "      <td>16.7</td>\n",
              "      <td>308.01</td>\n",
              "      <td>1020.0</td>\n",
              "      <td>3517.08</td>\n",
              "      <td>34.90</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>38014 rows × 18 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6c99007f-e792-4fe2-98af-0879fe7f6bcb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6c99007f-e792-4fe2-98af-0879fe7f6bcb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6c99007f-e792-4fe2-98af-0879fe7f6bcb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4e6467b4-cc35-44cc-9da3-2411d74205aa\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4e6467b4-cc35-44cc-9da3-2411d74205aa')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4e6467b4-cc35-44cc-9da3-2411d74205aa button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 112
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.fillna"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3N7n7T2IFFi1",
        "outputId": "8c0e2e6b-973d-4d14-f10f-29a2efac6203"
      },
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method DataFrame.fillna of                DateTime         Holiday  HolidayFlag  DayOfWeek  WeekOfYear  \\\n",
              "0      01/11/2011 00:00            None            0          1          44   \n",
              "1      01/11/2011 00:30            None            0          1          44   \n",
              "2      01/11/2011 01:00            None            0          1          44   \n",
              "3      01/11/2011 01:30            None            0          1          44   \n",
              "4      01/11/2011 02:00            None            0          1          44   \n",
              "...                 ...             ...          ...        ...         ...   \n",
              "38009  31/12/2013 21:30  New Year's Eve            1          1           1   \n",
              "38010  31/12/2013 22:00  New Year's Eve            1          1           1   \n",
              "38011  31/12/2013 22:30  New Year's Eve            1          1           1   \n",
              "38012  31/12/2013 23:00  New Year's Eve            1          1           1   \n",
              "38013  31/12/2013 23:30  New Year's Eve            1          1           1   \n",
              "\n",
              "       Day  Month  Year  PeriodOfDay ForecastWindProduction SystemLoadEA  \\\n",
              "0        1     11  2011            0                 315.31      3388.77   \n",
              "1        1     11  2011            1                 321.80      3196.66   \n",
              "2        1     11  2011            2                 328.57      3060.71   \n",
              "3        1     11  2011            3                 335.60      2945.56   \n",
              "4        1     11  2011            4                 342.90      2849.34   \n",
              "...    ...    ...   ...          ...                    ...          ...   \n",
              "38009   31     12  2013           43                1179.14      3932.22   \n",
              "38010   31     12  2013           44                1152.01      3821.44   \n",
              "38011   31     12  2013           45                1123.67      3724.21   \n",
              "38012   31     12  2013           46                1094.24      3638.16   \n",
              "38013   31     12  2013           47                 1064.0      3624.25   \n",
              "\n",
              "       SMPEA ORKTemperature ORKWindspeed CO2Intensity ActualWindProduction  \\\n",
              "0      49.26           6.00         9.30       600.71               356.00   \n",
              "1      49.26           6.00        11.10       605.42               317.00   \n",
              "2      49.10           5.00        11.10       589.97               311.00   \n",
              "3      48.04           6.00         9.30       585.94               313.00   \n",
              "4      33.75           6.00        11.10       571.52               346.00   \n",
              "...      ...            ...          ...          ...                  ...   \n",
              "38009  34.51           6.00        22.20       285.31                812.0   \n",
              "38010  33.83           5.00        24.10       278.31                852.0   \n",
              "38011  31.75           4.00        20.40       280.91                962.0   \n",
              "38012  33.83           5.00        14.80       302.46                950.0   \n",
              "38013  33.83           5.00        16.70       308.01               1020.0   \n",
              "\n",
              "      SystemLoadEP2 SMPEP2  \n",
              "0           3159.60  54.32  \n",
              "1           2973.01  54.23  \n",
              "2           2834.00  54.23  \n",
              "3           2725.99  53.47  \n",
              "4           2655.64  39.87  \n",
              "...             ...    ...  \n",
              "38009       3692.95  42.45  \n",
              "38010        3571.0  33.83  \n",
              "38011       3460.29  31.75  \n",
              "38012       3563.99   50.6  \n",
              "38013       3517.08   34.9  \n",
              "\n",
              "[38014 rows x 18 columns]>"
            ]
          },
          "metadata": {},
          "execution_count": 88
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Feature engineering"
      ],
      "metadata": {
        "id": "FPg3EctAM_tn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "label encoding"
      ],
      "metadata": {
        "id": "wSJmJiaJDimP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "heatmap"
      ],
      "metadata": {
        "id": "2w9QtnKtdnNd"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 646
        },
        "id": "jB5ywycHMyOw",
        "outputId": "ef262d0f-faaf-41fc-c76b-1b8994f3fdfb"
      },
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-89-0ef81c6e1182>:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  corr=df.corr()\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "convert float to numeric"
      ],
      "metadata": {
        "id": "KyebmnCPdskS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def clean_column(column):\n",
        "\n",
        "\n",
        "    return column\n",
        "\n",
        "# Apply the clean_column function to the affected columns\n",
        "columns_to_clean = ['ForecastWindProduction', 'SMPEA','SystemLoadEA','SystemLoadEP2','ORKWindspeed','CO2Intensity','SMPEP2']  # Replace with the actual column names\n",
        "for column in columns_to_clean:\n",
        "    df[column] = clean_column(df[column])\n",
        "\n",
        "# Fill NaN values with the mean or other appropriate strategies\n",
        "df.fillna(df.mean(), inplace=True)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3WowYb7-C05G",
        "outputId": "35df8c68-e952-4eb1-b42b-f7a25e9a71da"
      },
      "execution_count": 104,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-104-7dc0e84b08d9>:12: FutureWarning: The default value of numeric_only in DataFrame.mean is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  df.fillna(df.mean(), inplace=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "specify target variabes and feature variables"
      ],
      "metadata": {
        "id": "GgI0oxavGeDj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "target_variable = 'SystemLoadEA'  # Replace with your target variable\n",
        "feature_columns = ['ForecastWindProduction', 'CO2Intensity', 'ActualWindProduction', 'SystemLoadEP2', 'SMPEP2']\n"
      ],
      "metadata": {
        "id": "nKpqqABOFnUU"
      },
      "execution_count": 105,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "split the dataset"
      ],
      "metadata": {
        "id": "ehvc7hB2G416"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "5pvnFftVGqC8"
      },
      "execution_count": 106,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from pandas.core.groupby.generic import DataFrameGroupBy\n",
        "\n",
        "\n",
        "# Define training and testing sets\n",
        "X = df[feature_columns]\n",
        "y = df[target_variable]\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"
      ],
      "metadata": {
        "id": "EOFXnZPYHBgS"
      },
      "execution_count": 107,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"ForecastWindProduction\"] = pd.to_numeric(df[\"ForecastWindProduction\"], errors= 'coerce')\n",
        "df[\"SystemLoadEA\"] = pd.to_numeric(df[\"SystemLoadEA\"], errors= 'coerce')\n",
        "df[\"SMPEA\"] = pd.to_numeric(df[\"SMPEA\"], errors= 'coerce')\n",
        "df[\"ORKTemperature\"] = pd.to_numeric(df[\"ORKTemperature\"], errors= 'coerce')\n",
        "df[\"ORKWindspeed\"] = pd.to_numeric(df[\"ORKWindspeed\"], errors= 'coerce')\n",
        "df[\"CO2Intensity\"] = pd.to_numeric(df[\"CO2Intensity\"], errors= 'coerce')\n",
        "df[\"ActualWindProduction\"] = pd.to_numeric(df[\"ActualWindProduction\"], errors= 'coerce')\n",
        "df[\"SystemLoadEP2\"] = pd.to_numeric(df[\"SystemLoadEP2\"], errors= 'coerce')\n",
        "df[\"SMPEP2\"] = pd.to_numeric(df[\"SMPEP2\"], errors= 'coerce')"
      ],
      "metadata": {
        "id": "3r8Hq4O2Hg_q"
      },
      "execution_count": 108,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "implement random forest algorithmn"
      ],
      "metadata": {
        "id": "AGNan9k7dyOE"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "eP23R7nKdx-y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\n",
        "model = RandomForestRegressor()\n",
        "model.fit(X_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "9mYNl-fMKEGA",
        "outputId": "4bf264d8-0fe2-4ee2-85bb-c87ad9f9250a"
      },
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestRegressor()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "sample features"
      ],
      "metadata": {
        "id": "9ZIEgYZ7d3Wj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "features = np.array([[10, 12, 54.10, 4241.05, 49.56]])\n",
        "model.predict(features)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fDdLiWaWceVH",
        "outputId": "3e40ce75-f267-45f1-f4b1-54c1f6c8db15"
      },
      "execution_count": 111,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but RandomForestRegressor was fitted with feature names\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([4284.7246])"
            ]
          },
          "metadata": {},
          "execution_count": 111
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "AZvZW0rNdUix"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}